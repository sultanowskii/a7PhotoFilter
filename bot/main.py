from telegram.ext import (CommandHandler, ConversationHandler, Updater, MessageHandler, Filters, StringCommandHandler)
from telegram import InputMediaPhoto, ParseMode, ReplyKeyboardMarkup, ReplyKeyboardRemove, PhotoSize

from requests import post, get, delete, put

import config
from data.users import User
from data import db_session

import base64
from io import BytesIO
from werkzeug import exceptions
import logging

logging.basicConfig(
    filename='logs.log',
    format='%(asctime)s %(levelname)s %(name)s %(message)s'
)

db_session.global_init("db/users.sqlite")

current_rooms = dict()
current_room = dict()
current_images = dict()
current_image = dict()
updater = None


def start(update, context):
    session = db_session.create_session()
    chat_id = update.message.chat_id
    user = session.query(User).filter(User.chat_id == chat_id).first()
    if not user:
        name = update.message.chat.first_name
        lastname = update.message.chat.last_name
        answer = post(f'{config.API_ADDRESS}/api/users', json={'name': name, 'lastname': lastname}).json()
        if 'success' in answer.keys():
            user = User(name=name, lastname=lastname, chat_id=chat_id, mainid=answer.get('id'))
            session.add(user)
            session.commit()
            logging.info(f'New user registered: {chat_id} {lastname} {name}')
            update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n"
                                      f" üì∑–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ç–≤–æ–µ —Ñ–æ—Ç–æ.\n"
                                      f"–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º - /help.\n"
                                      f"–ê –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ç–≤–æ–µ —Ñ–æ—Ç–æ, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –µ–≥–æ! "
                                      f"(–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞: 300–∫–±)")
        else:
            err = answer.get('error')
            update.message.reply_text(f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞! {err}')
    else:
        name = user.name
        update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n"
                                  f" üì∑ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ç–≤–æ–µ —Ñ–æ—Ç–æ.\n"
                                  f"–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º - /help.\n"
                                  f" –ê –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ç–≤–æ–µ —Ñ–æ—Ç–æ, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –µ–≥–æ! "
                                  f"(–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞: 300–∫–±)")


def help(update, context):
    update.message.reply_text(
        "  –Ø –ø–æ–º–æ–≥—É –Ω–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ñ–æ—Ç–æ.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –µ–≥–æ –º–Ω–µ!\n\n"
        "‚ùóÔ∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ - 300–∫–±</b>\n\n"
        "   –¢–∞–∫ –∂–µ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å <i>–∫–æ–º–Ω–∞—Ç–∞–º–∏</i>\n"
        "–ö–æ–º–Ω–∞—Ç–∞ - –æ—Å–æ–±–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –∫—É–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º–∏, –¥–æ–±–∞–≤–∏–≤ —Ç—É–¥–∞ —Å–≤–æ–∏—Ö "
        "–¥—Ä—É–∑–µ–π!\n\n"
        "‚úèÔ∏è–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "  /rooms - –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∫–æ–º–Ω–∞—Ç\n"
        "  /help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å (—ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n\n"
        "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: @a7ult, @gabidullin_kamil\n"
        "Github (a7ult): https://github.com/sultanowskii/a7PhotoFilter", parse_mode=ParseMode.HTML)


def show_rooms(update, context, refresh=True):  # Function to show all users' rooms. 'Refresh' is needing or not to
    # update rooms-list (to make it works faster)
    text = 'üè´<b>–í–∞—à–∏ –∫–æ–º–Ω–∞—Ç—ã</b>:\n'
    if refresh:
        session = db_session.create_session()
        user_id = session.query(User).filter(User.chat_id == str(update.message.chat_id)).first().mainid
        user = get(f'{config.API_ADDRESS}/api/users/{user_id}').json()
        if user.get('error'):
            logging.error(f'During /rooms API\'s sent error: {user.get("error")}')
            update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                      '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
            return ConversationHandler.END
        rooms = user['User'].get('rooms')
        global current_rooms
        current_rooms[update.message.chat_id] = []
        for i in range(len(rooms)):
            room = get(f'{config.API_ADDRESS}/api/rooms/{rooms[i]}').json()
            if not room or room.get('error'):
                logging.error(f'During /rooms API\'s sent error: {room.get("error")}')
                update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                          '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
                return ConversationHandler.END
            text += f" <b>{i + 1}</b>: " + room['Room'].get('name') + '\n'
            current_rooms[update.message.chat_id].append(room)
    else:
        rooms = current_rooms.get(update.message.chat_id)
        for i in range(len(rooms)):
            text += f" <b>{i + 1}</b>: " + rooms[i]['Room'].get('name') + '\n'
    reply_keyboard = [['üñç–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É', 'üö™–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É'],
                      ['üì©–î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É', '‚Ü©Ô∏è–ù–∞–∑–∞–¥']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=markup)


def show_room(update, context, num=None, refresh=True):  # Function to show user one current room, num is room's local
    # id, refresh is parameter to or not to update images-list (to make it works faster)
    global current_room
    global current_rooms
    global current_image
    global current_images
    if num == None:
        num = update.message.text
    else:
        num = int(num) + 1
    curr_id = update.message.chat_id
    if str(num) not in list(str(i) for i in range(1, len(current_rooms[curr_id]) + 1)):
        update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã.')
        return 3
    current_room[curr_id] = int(num) - 1
    room = current_rooms[curr_id][current_room[curr_id]]['Room']
    name = room.get('name')
    text = f'üóÉ–ö–æ–º–Ω–∞—Ç–∞ \"{name}\":\n'
    if refresh:
        images = room.get('images')
        current_images[update.message.chat_id] = []
        for i in range(len(images)):
            if images[i] == None:
                continue
            image = get(f'{config.API_ADDRESS}/api/images/{images[i]}').json()
            if not image or image.get('error'):
                logging.error(f'During /rooms API\'s sent error: {image.get("error")}')
                update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                          '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
                return ConversationHandler.END
            text += f" <b>{i + 1}</b>: " + image['Image'].get('name') + '\n'
            current_images[update.message.chat_id].append(image)
    else:
        images = current_images.get(update.message.chat_id)
        for i in range(len(images)):
            text += f" <b>{i + 1}</b>: " + images[i]['Image'].get('name') + '\n'
    reply_keyboard = [['‚ùå–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É', 'üì£–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ª—é–¥–µ–π'],
                      ['üåÑ–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '‚Ü©Ô∏è–ù–∞–∑–∞–¥']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=markup)


def rooms(update, context):
    show_rooms(update, context)
    return 1


def command_rooms(update, context):  # 1st in Covnersation
    command = update.message.text
    if command == 'üñç–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É':
        update.message.reply_text('üìù–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', reply_markup=ReplyKeyboardRemove())
        return 2
    elif command == 'üö™–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É':
        reply_keyboard = []
        rooms_count = len(current_rooms[update.message.chat_id])
        if rooms_count % 3 == 0:
            for i in range(0, int(rooms_count / 3)):
                line = []
                for j in range(1, 4):
                    line.append(str(i * 3 + j))
                reply_keyboard.append(line)
        else:
            for i in range(0, int(rooms_count / 3) + 1):
                line = []
                for j in range(1, 4):
                    if i * 3 + j > rooms_count:
                        break
                    line.append(str(i * 3 + j))
                reply_keyboard.append(line)
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text('üî¢–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã:', reply_markup=markup)
        return 3
    elif command == 'üì©–î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É':
        update.message.reply_text('üìß –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:', reply_markup=ReplyKeyboardRemove())
        return 4
    elif command == '‚Ü©Ô∏è–ù–∞–∑–∞–¥':
        return ConversationHandler.END
    else:
        session = db_session.create_session()
        username = ''
        chat_id = update.message.chat_id
        try:
            username = session.query(User).filter(User.chat_id == chat_id).first().name + ', '
        except:
            logging.warning(f'Unregistered user entered dialog. Chat_id: {chat_id}')
        update.message.reply_text(f'üòø–ò–∑–≤–∏–Ω–∏, {username}—è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n\n–ù–∞–ø–∏—à–∏ /help, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!')
        return ConversationHandler.END


def add_room(update, context):  # 2nd in Conversation
    name = update.message.text
    if name == '‚Ü©Ô∏è–ù–∞–∑–∞–¥':
        show_rooms(update, context, False)
        return 1
    session = db_session.create_session()
    if len(current_rooms[update.message.chat_id]) < config.ROOM_IMAGE_LIMIT:
        user_id = session.query(User).filter(User.chat_id == str(update.message.chat_id)).first().mainid
        answer = post(f'{config.API_ADDRESS}/api/rooms', json={'name': name, 'users_id': str(user_id)}).json()
        if not answer or answer.get('error'):
            logging.error(f'During /rooms API\'s sent error: {answer.get("error")}')
            update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                      '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
            return ConversationHandler.END
        else:
            update.message.reply_text('‚úÖ–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
            show_rooms(update, context)
            return 1
    else:
        update.message.reply_text('‚ùóÔ∏è–£ –≤–∞—Å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–º–Ω–∞—Ç.')
        show_rooms(update, context, refresh=False)
        return 1


def room(update, context):  # 3rd in Conversation
    show_room(update, context)
    return 5


def add_user_to_room(update, context):  # 4th in Conversation
    rid, name = update.message.text.split('*')
    rid = int(rid)
    session = db_session.create_session()
    userid = session.query(User).filter(User.chat_id == update.message.chat_id).first().id
    answer = put(f'{config.API_ADDRESS}/api/rooms/{rid}', json={'users_id': userid}).json()
    if answer.get('success'):
        updater.bot.send_message(update.message.chat_id, f'‚úÖ–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–Ω–∞—Ç—É \"{name}\"')
        show_rooms(update, context)
        return 1
    elif answer.get('error') == exceptions.Forbidden:
        updater.bot.send_message(update.message.chat_id, f'üèö–≠—Ç–∞ –∫–æ–º–Ω–∞—Ç–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞!')
    elif answer.get('error') == exceptions.NotFound:
        updater.bot.send_message(update.message.chat_id, f'üèö–≠—Ç–∞ –∫–æ–º–Ω–∞—Ç–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞!')
    else:
        logging.error(f'During /rooms API\'s sent error: {answer.get("error")}')
        update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                  '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
        return 4


def command_room(update, context):  # 5th in Conversation
    global current_room
    global current_rooms
    command = update.message.text
    userid = update.message.chat_id
    if command == '‚ùå–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É':
        reply_keyboard = [['‚úÖ–î–∞', '‚ùå–ù–µ—Ç']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text('–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=markup)
        return 6
    elif command == 'üì£–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ª—é–¥–µ–π':
        room = current_rooms[userid][current_room[userid]]['Room']
        rid = room.get('id')
        name = room.get('name')
        code = f'{rid}*{name}'
        update.message.reply_text(f'üìù–í–∞—à –¥—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥: \n'
                                  f'<code>{code}</code>\n–≤–æ –≤–∫–ª–∞–¥–∫–µ "–î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É"', parse_mode=ParseMode.HTML)
        show_room(update, context, num=current_room[userid], refresh=False)
        return 5
    elif command == 'üåÑ–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ':
        global current_images
        if current_images.get(userid):
            reply_keyboard = []
            images_count = len(current_rooms[userid][current_room[userid]]['Room']['images'])
            if images_count % 3 == 0:
                for i in range(0, int(images_count / 3)):
                    line = []
                    for j in range(1, 4):
                        line.append(str(i * 3 + j))
                    reply_keyboard.append(line)
            else:
                for i in range(0, int(images_count / 3) + 1):
                    line = []
                    for j in range(1, 4):
                        if i * 3 + j > images_count:
                            break
                        line.append(str(i * 3 + j))
                    reply_keyboard.append(line)
            markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
            update.message.reply_text('üî¢–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', reply_markup=markup)
            return 7
        else:
            update.message.reply_text('üìÑ–≠—Ç–∞ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞')
            show_room(update, context, current_room[userid], False)
            return 5
    elif command == '‚Ü©Ô∏è–ù–∞–∑–∞–¥':
        show_rooms(update, context, refresh=False)
        return 1
    else:
        session = db_session.create_session()
        username = ''
        chat_id = update.message.chat_id
        try:
            username = session.query(User).filter(User.chat_id == chat_id).first().name + ', '
        except:
            logging.warning(f'Unregistered user entered dialog. Chat_id: {chat_id}')
        update.message.reply_text(f'üòø–ò–∑–≤–∏–Ω–∏, {username}—è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n\n–ù–∞–ø–∏—à–∏ /help, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!')
        return ConversationHandler.END


def delete_room(update, context):  # 6th in covnersation
    answer = update.message.text
    if answer == '‚úÖ–î–∞' or answer.lower() == '–¥–∞':
        global current_rooms
        global current_room
        userid = update.message.chat_id
        rid = current_rooms[userid][current_room[userid]]['Room']['id']
        answer = delete(f'{config.API_ADDRESS}/api/rooms/{rid}').json()
        if not answer:
            logging.error(f'During /rooms API\'s sent error: {answer.get("error")}')
            update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                      '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
            return 6
        update.message.reply_text('‚ÑπÔ∏è–ö–æ–º–Ω–∞—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
        show_rooms(update, context)
    else:
        show_rooms(update, context, False)
    return 1


def image(update, context):  # 7th in Conversation
    global current_image
    global current_images
    num = update.message.text
    userid = update.message.chat_id
    if num not in list(str(i) for i in range(1, len(current_images[userid]) + 1)):
        update.message.reply_text(f'üî¢–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
        return 7
    current_image[userid] = int(num) - 1
    image = current_images[update.message.chat_id][current_image[update.message.chat_id]].get('Image')
    file = base64.b64decode(image.get('data'))
    name = image.get('name')
    reply_keyboard = [['üóë–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É', '‚Ü©Ô∏è–ù–∞–∑–∞–¥']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    updater.bot.sendPhoto(update.message.chat_id, BytesIO(file))
    update.message.reply_text(f'üåÜ–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ \"{name}\"', reply_markup=markup)
    return 8


def command_image(update, context):  # 8th in Conversation
    command = update.message.text
    if command == 'üóë–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É':
        reply_keyboard = [['‚úÖ–î–∞', '‚ùå–ù–µ—Ç']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text('–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=markup)
        return 9
    elif command == '‚Ü©Ô∏è–ù–∞–∑–∞–¥':
        global current_room
        show_room(update, context, num=current_room[update.message.chat_id], refresh=False)
        return 5
    else:
        session = db_session.create_session()
        username = ''
        chat_id = update.message.chat_id
        try:
            username = session.query(User).filter(User.chat_id == chat_id).first().name + ', '
        except:
            logging.warning(f'Unregistered user entered dialog. Chat_id: {chat_id}')
        update.message.reply_text(f'üòø–ò–∑–≤–∏–Ω–∏, {username}—è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n\n–ù–∞–ø–∏—à–∏ /help, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!')
        return ConversationHandler.END


def delete_image(update, context):  # 9th in Conversation
    answer = update.message.text
    global current_image
    global current_images
    global current_rooms
    global current_room
    if answer == '‚úÖ–î–∞' or answer.lower() == '–¥–∞':
        userid = update.message.chat_id
        iid = current_images[userid][current_image[userid]]['Image'].get('id')
        answer = delete(f'{config.API_ADDRESS}/api/images/{iid}').json()
        rid = current_rooms[userid][current_room[userid]]['Room']['id']
        current_rooms[userid][current_room[userid]] = get(f'{config.API_ADDRESS}/api/rooms/{rid}').json()
        current_images[userid][current_image[userid]] = None
        if not answer or answer.get('error'):
            logging.error(f'During /rooms API\'s sent error: {answer.get("error")}')
            update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                      '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
            return 9
        update.message.reply_text('‚ÑπÔ∏è–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
        show_room(update, context, current_room[update.message.chat_id])
    else:
        show_room(update, context, current_room[update.message.chat_id], refresh=False)
    return 5


def image_get(update, context):
    file_info = context.bot.get_file(update.message.photo[0].file_id)
    file = bytes(file_info.download_as_bytearray())
    base64_data = base64.b64encode(file).decode('utf-8')


def choose_filter(update, context):  # 2nd in Conversation
    pass


def save_image_to_room(update, context):  # 3rd in Conversation
    pass


def choose_room(update, context):  # 4th in Context
    pass


def home(update, context):
    return ConversationHandler.END


def main():
    global updater
    updater = Updater(config.TOKEN, use_context=True)

    dp = updater.dispatcher

    rooms_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('rooms', rooms)],

        states={
            1: [MessageHandler(Filters.text, command_rooms)],
            2: [MessageHandler(Filters.text, add_room)],
            3: [MessageHandler(Filters.text, room)],
            4: [MessageHandler(Filters.text, add_user_to_room)],
            5: [MessageHandler(Filters.text, command_room)],
            6: [MessageHandler(Filters.text, delete_room)],
            7: [MessageHandler(Filters.text, image)],
            8: [MessageHandler(Filters.text, command_image)],
            9: [MessageHandler(Filters.text, delete_image)]
        },

        fallbacks=[CommandHandler('home', home)]

    )

    image_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(Filters.photo, image_get)],

        states={
            1: [MessageHandler(Filters.text, choose_filter)],
            2: [MessageHandler(Filters.text, save_image_to_room)],
            3: [MessageHandler(Filters.text, choose_room)]
        },

        fallbacks=[CommandHandler('home', home)]
    )
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help))
    dp.add_handler(rooms_conv_handler)
    dp.add_handler(image_conv_handler)
    updater.start_polling()

    updater.idle()


if __name__ == '__main__':
    main()
