from telegram.ext import (CommandHandler, ConversationHandler, Updater, MessageHandler, Filters, StringCommandHandler)
from telegram import InputMediaPhoto, ParseMode, bot, ReplyKeyboardMarkup, ReplyKeyboardRemove

from requests import post, get, delete, put

import config
from data.users import User
from data import db_session

import base64
from io import BytesIO
from werkzeug import exceptions
import logging
from datetime import datetime

import requests

logging.basicConfig(
    filename='logs.log',
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(name)s %(message)s'
)

db_session.global_init("db/users.sqlite")

is_in_rooms = dict()  # here we storage, if user is in /rooms or not
current_rooms = dict()  # all current user's rooms
current_room = dict()  # local id of current user's room
current_images = dict()  # all current user's images in current room
current_image = dict()  # local id of current user's image
fit_rooms = dict()  # a number of fit rooms (where user can save his image)
loaded_im_id = dict()  # id (on API) of image which user just uploaded
filtered_im_id = dict()  # id (on API) of filtered image which user just uploaded
start_text = '<b>–ì–ª–∞–≤–Ω–∞—è</b>\n\n' \
             ' üåÉ –ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –µ–≥–æ!\n' \
             ' üèò –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –∫–æ–º–Ω–∞—Ç –Ω–∞–ø–∏—à–∏ /rooms\n' \
             ' ü§î –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å, –∏—Å–ø–æ–ª—å–∑—É–π /help'
updater = None


def home_menu(update):
    global start_text
    is_in_rooms[update.message.chat_id] = False
    reply_keyboard = [['/rooms', '/help']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text(start_text, parse_mode=ParseMode.HTML, reply_markup=markup)


def start(update, context):
    is_in_rooms[update.message.chat_id] = False
    reply_keyboard = [['/help']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    session = db_session.create_session()
    chat_id = update.message.chat_id
    user = session.query(User).filter(User.chat_id == chat_id).first()
    if not user:
        name = update.message.chat.first_name
        lastname = update.message.chat.last_name
        response = post(f'{config.API_ADDRESS}/api/users', json={'name': name, 'lastname': lastname}).json()
        if 'success' in response.keys():
            user = User(name=name, lastname=lastname, chat_id=chat_id, mainid=response.get('id'))
            session.add(user)
            session.commit()
            logging.info(f'New user registered: {chat_id} {lastname} {name}')
            update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n"
                                      f" üì∑–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ç–≤–æ–µ —Ñ–æ—Ç–æ.\n"
                                      f"–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º - /help.\n"
                                      f"–ê –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ç–≤–æ–µ —Ñ–æ—Ç–æ, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –µ–≥–æ! "
                                      f"(–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞: 500–∫–±)\n\n"
                                      " üòΩ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!", reply_markup=markup)
        else:
            logging.error(f'During /rooms API\'s sent error: {user.get("error")}')
            update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                      '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
            return home(update, context)
    else:
        name = user.name
        update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n"
                                  f" üì∑ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ç–≤–æ–µ —Ñ–æ—Ç–æ.\n"
                                  f"–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º - /help.\n"
                                  f" –ê –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ç–≤–æ–µ —Ñ–æ—Ç–æ, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –µ–≥–æ! "
                                  f"(–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞: 500–∫–±)\n\n"
                                  "üòΩ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!", reply_markup=markup)


def help(update, context):
    is_in_rooms[update.message.chat_id] = False
    reply_keyboard = [['/rooms', '/help']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text(
        "  –Ø –ø–æ–º–æ–≥—É –Ω–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ñ–æ—Ç–æ.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ –º–Ω–µ!\n\n"
        "–¢–∞–∫ –∂–µ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å <i>–∫–æ–º–Ω–∞—Ç–∞–º–∏</i>\n"
        "<b>–ö–æ–º–Ω–∞—Ç–∞</b> - –æ—Å–æ–±–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –∫—É–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º–∏, –¥–æ–±–∞–≤–∏–≤ —Ç—É–¥–∞ "
        "—Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π!\n\n"
        "‚ùóÔ∏è–í–∞–∂–Ω–æ\n"
        "   - <b>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∞—à–µ —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!</b>"
        "   - <b>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –∫–∞–∫ —Ñ–æ—Ç–æ!</b>\n"
        "   - <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ - 500–∫–±</b>\n"
        "   - <b>–ù–∞ –∑–∞–≥—Ä—É–∑–∫—É —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ä–µ–º—è, —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!</b>\n"
        "   - <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, BMP</b>\n"
        "   - <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ï—Å–ª–∏ –≤—ã –ø—Ä–∏—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –Ω–∞ –Ω–µ–≥–æ –±–æ–ª–µ–µ "
        "–º–∏–Ω—É—Ç—ã –Ω–µ—Ç—É –æ—Ç–≤–µ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º (—Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ)</b>\n\n"
        "‚úèÔ∏è–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "  /rooms - –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∫–æ–º–Ω–∞—Ç\n"
        "  /help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å (—ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n\n"
        "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: @a7ult, @gabidullin_kamil\n"
        "Github (a7ult): https://github.com/sultanowskii/a7PhotoFilter\n\n"
        " üòΩ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!", parse_mode=ParseMode.HTML, reply_markup=markup)


def show_rooms(update, context, refresh=True):  # Function to show all users' rooms. 'Refresh' is need or not to
    # update rooms-list (to make it works faster)
    update.message.reply_text('üëæ–û—Ç–∫—Ä—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç...')
    text = 'üè´<b>–í–∞—à–∏ –∫–æ–º–Ω–∞—Ç—ã</b>:\n'
    if refresh:
        session = db_session.create_session()
        user_id = session.query(User).filter(User.chat_id == str(update.message.chat_id)).first().mainid
        user = None
        for k in range(3):
            try:
                user = get(f'{config.API_ADDRESS}/api/users/{user_id}', timeout=3).json()
                break
            except requests.exceptions.ConnectionError:
                if k < 2:
                    continue
                logging.fatal(f'Server is unreachable!')
                update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
                return home(update, context)
        if not user or user.get('error'):
            logging.error(f'During /rooms API\'s sent error: {user.get("error")}')
            update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                      '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
            return home(update, context)
        rooms = user['User'].get('rooms')
        global current_rooms
        current_rooms[update.message.chat_id] = []
        for i in range(len(rooms)):
            room = None
            for k in range(3):
                try:
                    room = get(f'{config.API_ADDRESS}/api/rooms/{rooms[i]}', timeout=3).json()
                    break
                except requests.exceptions.ConnectionError:
                    if k < 2:
                        continue
                    logging.fatal(f'Server is unreachable!')
                    update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, '
                                              '@gabidullin_kamil!')
                    return home(update, context)
            if not room or room.get('error'):
                logging.error(f'During /rooms API\'s sent error: {room.get("error")}')
                update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                          '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
                return home(update, context)
            text += f" <b>{i + 1}</b>: " + room['Room'].get('name') + '\n'
            current_rooms[update.message.chat_id].append(room)
    else:
        rooms = current_rooms.get(update.message.chat_id)
        for i in range(len(rooms)):
            text += f" <b>{i + 1}</b>: " + rooms[i]['Room'].get('name') + '\n'
    if len(rooms) == 0:
        reply_keyboard = [['üñç–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É'],
                          ['üì©–î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É', '‚Ü©Ô∏è–ù–∞–∑–∞–¥']]
    else:
        reply_keyboard = [['üñç–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É', 'üö™–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É'],
                          ['üì©–î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É', '‚Ü©Ô∏è–ù–∞–∑–∞–¥']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=markup)
    return 1


def show_room(update, context, num=None, refresh=True):  # Function to show user one current room, num is room's local
    # id, refresh is parameter to or not to update images-list (to make it works faster)
    global current_room
    global current_rooms
    global current_image
    global current_images
    if num == None:
        num = update.message.text
    else:
        num = int(num) + 1
    curr_id = update.message.chat_id
    if str(num) not in list(str(i) for i in range(1, len(current_rooms[curr_id]) + 1)):
        update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã.')
        return 3
    current_room[curr_id] = int(num) - 1
    room = current_rooms[curr_id][current_room[curr_id]]['Room']
    name = room.get('name')
    text = f'üóÉ–ö–æ–º–Ω–∞—Ç–∞ \"{name}\":\n'
    update.message.reply_text('üëæ–û—Ç–∫—Ä—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...')
    if refresh:
        images = room.get('images')
        current_images[update.message.chat_id] = []
        for i in range(len(images)):
            if images[i] == None:
                continue
            image = None
            for k in range(3):
                try:
                    image = get(f'{config.API_ADDRESS}/api/images/{images[i]}', timeout=3).json()
                    break
                except requests.exceptions.ConnectionError:
                    if k < 2:
                        continue
                    logging.fatal(f'Server is unreachable!')
                    update.message.reply_text(
                        'üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
                    return home(update, context)
            if not image or image.get('error'):
                logging.error(f'During /rooms API\'s sent error: {image.get("error")}')
                update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                          '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
                return home(update, context)
            text += f" <b>{i + 1}</b>: " + image['Image'].get('name') + '\n'
            current_images[update.message.chat_id].append(image)
    else:
        images = current_images.get(update.message.chat_id)
        for i in range(len(images)):
            text += f" <b>{i + 1}</b>: " + images[i]['Image'].get('name') + '\n'
    reply_keyboard = [['‚ùå–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É', 'üì£–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ª—é–¥–µ–π'],
                      ['üåÑ–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'üö∂‚Äç‚ôÇÔ∏è–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã'],
                      ['‚Ü©Ô∏è–ù–∞–∑–∞–¥']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=markup)
    return 5


def rooms(update, context):
    is_in_rooms[update.message.chat_id] = True
    return show_rooms(update, context)


def command_rooms(update, context):  # 1st in Covnersation
    command = update.message.text
    if command == 'üñç–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É':
        update.message.reply_text('üìù–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', reply_markup=ReplyKeyboardRemove())
        return 2
    elif command == 'üö™–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É':
        chat_id = update.message.chat_id
        if len(current_rooms[chat_id]) == 0:
            session = db_session.create_session()
            username = ''
            try:
                username = session.query(User).filter(User.chat_id == chat_id).first().name + ', '
            except:
                logging.warning(f'Unregistered user entered dialog. Chat_id: {chat_id}')
            update.message.reply_text(f'üòø–ò–∑–≤–∏–Ω–∏, {username}—è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n\n–ù–∞–ø–∏—à–∏ /help, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!')
            return home(update, context)
        reply_keyboard = []
        rooms_count = len(current_rooms[update.message.chat_id])
        if rooms_count % 3 == 0:
            for i in range(0, int(rooms_count / 3)):
                line = []
                for j in range(1, 4):
                    line.append(str(i * 3 + j))
                reply_keyboard.append(line)
        else:
            for i in range(0, int(rooms_count / 3) + 1):
                line = []
                for j in range(1, 4):
                    if i * 3 + j > rooms_count:
                        break
                    line.append(str(i * 3 + j))
                reply_keyboard.append(line)
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text('üî¢–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã.', reply_markup=markup)
        return 3
    elif command == 'üì©–î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É':
        reply_keyboard = [['‚Ü©Ô∏è–ù–∞–∑–∞–¥']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text('üìß –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:', reply_markup=markup)
        return 4
    elif command == '‚Ü©Ô∏è–ù–∞–∑–∞–¥':
        is_in_rooms[update.message.chat_id] = False
        return home(update, context)
    else:
        session = db_session.create_session()
        username = ''
        chat_id = update.message.chat_id
        try:
            username = session.query(User).filter(User.chat_id == chat_id).first().name + ', '
        except:
            logging.warning(f'Unregistered user entered dialog. Chat_id: {chat_id}')
        update.message.reply_text(f'üòø–ò–∑–≤–∏–Ω–∏, {username}—è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n\n–ù–∞–ø–∏—à–∏ /help, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!')
        return home(update, context)


def add_room(update, context):  # 2nd in Conversation
    name = update.message.text
    if name == '‚Ü©Ô∏è–ù–∞–∑–∞–¥':
        return show_rooms(update, context, False)
    session = db_session.create_session()
    if len(current_rooms[update.message.chat_id]) < config.ROOM_IMAGE_LIMIT:
        user_id = session.query(User).filter(User.chat_id == str(update.message.chat_id)).first().mainid
        response = None
        for k in range(3):
            try:
                response = post(f'{config.API_ADDRESS}/api/rooms', json={'name': name, 'users_id': str(user_id)},
                                timeout=3).json()
                break
            except requests.exceptions.ConnectionError:
                if k < 2:
                    continue
                logging.fatal(f'Server is unreachable!')
                update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
                return home(update, context)
        if not response or response.get('error'):
            logging.error(f'During /rooms API\'s sent error: {response.get("error")}')
            update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                      '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
            return home(update, context)
        update.message.reply_text('‚úÖ–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
        logging.info(f'Added new room! ID: {response.get("id")}')
        return show_rooms(update, context)
    else:
        update.message.reply_text('‚ùóÔ∏è–£ –≤–∞—Å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–º–Ω–∞—Ç.')
        return show_rooms(update, context, refresh=False)


def room(update, context):  # 3rd in Conversation
    return show_room(update, context)


def add_user_to_room(update, context):  # 4th in Conversation
    rid = ''
    name = ''
    if update.message.text == '‚Ü©Ô∏è–ù–∞–∑–∞–¥':
        return show_rooms(update, context)
    try:
        rid, name = update.message.text.split('*')
        rid = int(rid)
    except Exception as e:
        reply_keyboard = [['‚Ü©Ô∏è–ù–∞–∑–∞–¥']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥!', reply_markup=markup)
        return 4
    session = db_session.create_session()
    userid = session.query(User).filter(User.chat_id == update.message.chat_id).first().mainid
    response = None
    for k in range(3):
        try:
            response = get(f'{config.API_ADDRESS}/api/rooms/{rid}', timeout=3).json()
            break
        except requests.exceptions.ConnectionError:
            if k < 2:
                continue
            logging.fatal(f'Server is unreachable!')
            update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
            return home(update, context)
    if response.get('error') or response.get('Room')['name'] != name:
        reply_keyboard = [['‚Ü©Ô∏è–ù–∞–∑–∞–¥']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥!", reply_markup=markup)
        return 4
    response = None
    for k in range(3):
        try:
            response = put(f'{config.API_ADDRESS}/api/rooms/{rid}', json={'users_id': userid}, timeout=3).json()
            break
        except requests.exceptions.ConnectionError:
            if k < 2:
                continue
            logging.fatal(f'Server is unreachable!')
            update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
            return home(update, context)
    if not response:
        logging.error(f'During /rooms API\'s sent error: {response.get("error")}')
        update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                  '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
        return home(update, context)
    if response.get('error') == exceptions.Forbidden:
        reply_keyboard = [['‚Ü©Ô∏è–ù–∞–∑–∞–¥']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text(f'üèö–≠—Ç–∞ –∫–æ–º–Ω–∞—Ç–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥.', reply_markup=markup)
        return 4
    elif response.get('error'):
        logging.error(f'During /rooms API\'s sent error: {response.get("error")}')
        update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                  '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
        return home(update, context)
    update.message.reply_text(f'‚úÖ–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–Ω–∞—Ç—É \"{name}\"')
    return show_rooms(update, context)


def command_room(update, context):  # 5th in Conversation
    global current_room
    global current_rooms
    command = update.message.text
    userid = update.message.chat_id
    if command == '‚ùå–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É':
        reply_keyboard = [['‚úÖ–î–∞', '‚ùå–ù–µ—Ç']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text('–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=markup)
        return 6
    elif command == 'üì£–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ª—é–¥–µ–π':
        room = current_rooms[userid][current_room[userid]]['Room']
        rid = room.get('id')
        name = room.get('name')
        code = f'{rid}*{name}'
        update.message.reply_text(f'üìù–í–∞—à –¥—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥: \n'
                                  f'<code>{code}</code>\n–≤–æ –≤–∫–ª–∞–¥–∫–µ "–î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É"', parse_mode=ParseMode.HTML)
        return show_room(update, context, num=current_room[userid], refresh=False)
    elif command == 'üåÑ–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ':
        global current_images
        if current_images.get(userid):
            reply_keyboard = []
            images_count = len(current_rooms[userid][current_room[userid]]['Room']['images'])
            if images_count % 3 == 0:
                for i in range(0, int(images_count / 3)):
                    line = []
                    for j in range(1, 4):
                        line.append(str(i * 3 + j))
                    reply_keyboard.append(line)
            else:
                for i in range(0, int(images_count / 3) + 1):
                    line = []
                    for j in range(1, 4):
                        if i * 3 + j > images_count:
                            break
                        line.append(str(i * 3 + j))
                    reply_keyboard.append(line)
            markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
            update.message.reply_text('üî¢–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.', reply_markup=markup)
            return 7
        else:
            update.message.reply_text('üìÑ–≠—Ç–∞ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞')
            return show_room(update, context, current_room[userid], False)
    elif command == '‚Ü©Ô∏è–ù–∞–∑–∞–¥':
        return show_rooms(update, context, refresh=False)
    elif command == 'üö∂‚Äç‚ôÇÔ∏è–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã':
        reply_keyboard = [['‚úÖ–î–∞', '‚ùå–ù–µ—Ç']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text('–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=markup)
        return 10
    else:
        session = db_session.create_session()
        username = ''
        chat_id = update.message.chat_id
        try:
            username = session.query(User).filter(User.chat_id == chat_id).first().name + ', '
        except:
            logging.warning(f'Unregistered user entered dialog. Chat_id: {chat_id}')
        update.message.reply_text(f'üòø–ò–∑–≤–∏–Ω–∏, {username}—è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n\n–ù–∞–ø–∏—à–∏ /help, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!')
        return home(update, context)


def delete_room(update, context):  # 6th in covnersation
    answer = update.message.text
    if answer == '‚úÖ–î–∞' or answer.lower() == '–¥–∞':
        global current_rooms
        global current_room
        userid = update.message.chat_id
        rid = current_rooms[userid][current_room[userid]]['Room']['id']
        response = None
        for k in range(3):
            try:
                response = delete(f'{config.API_ADDRESS}/api/rooms/{rid}', timeout=3).json()
                break
            except requests.exceptions.ConnectionError:
                if k < 2:
                    continue
                logging.fatal(f'Server is unreachable!')
                update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
                return home(update, context)
        if not response or response.get('error'):
            logging.error(f'During /rooms API\'s sent error: {response.get("error")}')
            update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                      '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
            return home(update, context)
        update.message.reply_text('‚ÑπÔ∏è–ö–æ–º–Ω–∞—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
        return show_rooms(update, context)
    return show_rooms(update, context, False)


def image(update, context):  # 7th in Conversation
    global current_image
    global current_images
    num = update.message.text
    userid = update.message.chat_id
    if num not in list(str(i) for i in range(1, len(current_images[userid]) + 1)):
        update.message.reply_text(f'üî¢–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
        return 7
    current_image[userid] = int(num) - 1
    image = current_images[update.message.chat_id][current_image[update.message.chat_id]].get('Image')
    file = base64.b64decode(image.get('data'))
    name = image.get('name')
    reply_keyboard = [['üóë–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É', '‚úçÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏'],
                      ['‚Ü©Ô∏è–ù–∞–∑–∞–¥']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    updater.bot.sendPhoto(update.message.chat_id, BytesIO(file))
    update.message.reply_text(f'üåÜ–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ \"{name}\"', reply_markup=markup)
    return 8


def command_image(update, context):  # 8th in Conversation
    command = update.message.text
    if command == 'üóë–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É':
        reply_keyboard = [['‚úÖ–î–∞', '‚ùå–ù–µ—Ç']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text('–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=markup)
        return 9
    elif command == '‚úçÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏':
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
        return 11
    elif command == '‚Ü©Ô∏è–ù–∞–∑–∞–¥':
        global current_room
        show_room(update, context, num=current_room[update.message.chat_id], refresh=False)
        return 5
    else:
        session = db_session.create_session()
        username = ''
        chat_id = update.message.chat_id
        try:
            username = session.query(User).filter(User.chat_id == chat_id).first().name + ', '
        except:
            logging.warning(f'Unregistered user entered dialog. Chat_id: {chat_id}')
        update.message.reply_text(f'üòø–ò–∑–≤–∏–Ω–∏, {username}—è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n\n–ù–∞–ø–∏—à–∏ /help, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!')
        return home(update, context)


def delete_image(update, context):  # 9th in Conversation
    response = update.message.text
    global current_image
    global current_images
    global current_rooms
    global current_room
    if response == '‚úÖ–î–∞' or response.lower() == '–¥–∞':
        userid = update.message.chat_id
        iid = current_images[userid][current_image[userid]]['Image'].get('id')
        response = None
        for k in range(3):
            try:
                response = delete(f'{config.API_ADDRESS}/api/images/{iid}', timeout=3).json()
                break
            except requests.exceptions.ConnectionError:
                if k < 2:
                    continue
                logging.fatal(f'Server is unreachable!')
                update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
                return home(update, context)
        rid = current_rooms[userid][current_room[userid]]['Room']['id']
        for k in range(3):
            try:
                current_rooms[userid][current_room[userid]] = get(f'{config.API_ADDRESS}/api/rooms/{rid}',
                                                                  timeout=3).json()
                break
            except requests.exceptions.ConnectionError:
                if k < 2:
                    continue
                logging.fatal(f'Server is unreachable!')
                update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
                return home(update, context)
        current_images[userid][current_image[userid]] = None
        if not response or response.get('error'):
            logging.error(f'During /rooms API\'s sent error: {response.get("error")}')
            update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                      '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
            return home(update, context)
        update.message.reply_text('‚ÑπÔ∏è–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
        return show_room(update, context, current_room[update.message.chat_id])
    return show_room(update, context, current_room[update.message.chat_id], refresh=False)


def leave_the_room(update, context):  # 10 in Conversation
    ans = update.message.text
    if ans == '‚úÖ–î–∞':
        global current_rooms
        global current_room
        room = current_rooms[update.message.chat_id][current_room[update.message.chat_id]].get('Room')
        rid = room.get('id')
        room_name = room.get('name')
        session = db_session.create_session()
        userid = session.query(User).filter(User.chat_id == update.message.chat_id).first().mainid
        response = None
        for k in range(3):
            try:
                response = put(f'{config.API_ADDRESS}/api/rooms/{rid}', json={'users_id': userid,
                                                                              'remove_user': True}, timeout=3).json()
                break
            except requests.exceptions.ConnectionError:
                if k < 2:
                    continue
                logging.fatal(f'Server is unreachable!')
                update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
                return home(update, context)
        if not response or response.get('error'):
            logging.error(f'During /rooms API\'s sent error: {response.get("error")}')
            update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                      '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
            return home(update, context)
        update.message.reply_text(f'‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É \"{room_name}\"')
        return show_rooms(update, context)
    else:
        return show_room(update, context, num=current_room[update.message.chat_id])


def change_the_name_of_the_photo(update, context):  # 11 in Conversation
    global current_image
    global current_images
    new_name = update.message.text
    info = current_images[update.message.chat_id][current_image[update.message.chat_id]].get('Image')
    image_id = info.get('id')
    response = None
    for k in range(3):
        try:
            response = put(f'{config.API_ADDRESS}/api/images/{image_id}', json={'name': new_name}, timeout=3).json()
            break
        except requests.exceptions.ConnectionError:
            if k < 2:
                continue
            logging.fatal(f'Server is unreachable!')
            update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
            return home(update, context)
    if not response or response.get('error'):
        logging.error(f'During /rooms API\'s sent error: {response.get("error")}')
        update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                  '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
        return home(update, context)
    update.message.reply_text(f'‚úÖ–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: \"{new_name}\"')
    return show_room(update, context, num=current_room[update.message.chat_id])


def image_get(update, context):
    if is_in_rooms.get(update.message.chat_id, None) == True:
        update.message.reply_text('–ù–∞–∫–ª–∞–¥—ã–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.')
        return ConversationHandler.END
    global loaded_im_id
    file_info = context.bot.get_file(update.message.photo[-1].file_id)
    mime = file_info.file_path.split('.')[-1].upper()
    file = bytes(file_info.download_as_bytearray())
    base64_data = base64.b64encode(file).decode('utf-8')
    reply_keyboard = [['üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 1', 'üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 2', '‚öΩÔ∏è–ß—ë—Ä–Ω–æ-–±–µ–ª–æ–µ 1'],
                      ['üñ≤ –ù–µ–≥–∞—Ç–∏–≤', 'üí°–í—ã—Å–≤–µ—Ç–ª–µ–Ω–∏–µ', 'üåå–†–∞–∑–º—ã—Ç–∏–µ'],
                      ['üìà–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏', 'üìâ–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞', 'üîä–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞'],
                      ['üè∫–†–µ—Ç—Ä–æ', '‚ö´Ô∏è‚ö™Ô∏è–ß—ë—Ä–Ω–æ-–±–µ–ª–æ–µ 2', 'üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 3'], ['üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 4']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    text = 'üî†<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:</b>\n\n üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 1\n üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 2\n ‚öΩÔ∏è–ß—ë—Ä–Ω–æ-–±–µ–ª–æ–µ 1\n üñ≤ –ù–µ–≥–∞—Ç–∏–≤\n' \
           ' üí°–í—ã—Å–≤–µ—Ç–ª–µ–Ω–∏–µ \n üåå–†–∞–∑–º—ã—Ç–∏–µ\n üìà–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏\n üìâ–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞\n üîä–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞\n üè∫–†–µ—Ç—Ä–æ' \
           '\n ‚ö´Ô∏è‚ö™Ô∏è–ß—ë—Ä–Ω–æ-–±–µ–ª–æ–µ 2\n üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 3\n üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 4'
    now = datetime.now().strftime('%H%M%S-%d%m%Y')
    response = None
    for k in range(3):
        try:
            response = post(f'{config.API_ADDRESS}/api/images',
                            json={'name': now, 'mime': mime, 'image_data': base64_data}, timeout=3)
            break
        except requests.exceptions.ConnectionError:
            if k < 2:
                continue
            logging.fatal(f'Server is unreachable!!')
            update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
            return home(update, context)
    code = response.status_code
    response = response.json()
    if not response or response.get('error'):
        if code == 400:
            logging.warning('Invalid image-data sent to server during /image')
            update.message.reply_text('üòø–° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ!')
            return home(update, context)
        else:
            logging.error(f'During /image API\'s sent error: {response.get("error")}')
            update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                      '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
        return home(update, context)
    iid = int(response.get('id'))
    loaded_im_id[update.message.chat_id] = iid
    update.message.reply_text(text, reply_markup=markup, parse_mode=ParseMode.HTML)
    return 1


def choose_filter(update, context):  # 1st in Conversation
    global loaded_im_id
    global filtered_im_id
    filter_type = update.message.text
    fid = 0
    if filter_type == 'üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 1':
        fid = 1
    elif filter_type == 'üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 2':
        fid = 2
    elif filter_type == '‚öΩÔ∏è–ß—ë—Ä–Ω–æ-–±–µ–ª–æ–µ 1':
        fid = 3
    elif filter_type == 'üñ≤ –ù–µ–≥–∞—Ç–∏–≤':
        fid = 4
    elif filter_type == 'üí°–í—ã—Å–≤–µ—Ç–ª–µ–Ω–∏–µ':
        fid = 5
    elif filter_type == 'üåå–†–∞–∑–º—ã—Ç–∏–µ':
        fid = 6
    elif filter_type == 'üìà–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏':
        fid = 7
    elif filter_type == 'üìâ–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞':
        fid = 8
    elif filter_type == 'üîä–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞':
        fid = 9
    elif filter_type == 'üè∫–†–µ—Ç—Ä–æ':
        fid = 10
    elif filter_type == '‚ö´Ô∏è‚ö™Ô∏è–ß—ë—Ä–Ω–æ-–±–µ–ª–æ–µ 2':
        fid = 11
    elif filter_type == 'üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 3':
        fid = 12
    elif filter_type == 'üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 4':
        fid = 13
    else:
        update.message.reply_text('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–≤–µ—Ç–∞.')
        reply_keyboard = [['üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 1', 'üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 2', '‚öΩÔ∏è–ß—ë—Ä–Ω–æ-–±–µ–ª–æ–µ 1'],
                          ['üñ≤ –ù–µ–≥–∞—Ç–∏–≤', 'üí°–í—ã—Å–≤–µ—Ç–ª–µ–Ω–∏–µ', 'üåå–†–∞–∑–º—ã—Ç–∏–µ'],
                          ['üìà–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏', 'üìâ–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞', 'üîä–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞'],
                          ['üè∫–†–µ—Ç—Ä–æ', '‚ö´Ô∏è‚ö™Ô∏è–ß—ë—Ä–Ω–æ-–±–µ–ª–æ–µ 2', 'üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 3'], ['üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 4']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:', reply_markup=markup)
        return 1
    update.message.reply_text('üëæ–§–æ—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...')
    imid = loaded_im_id[update.message.chat_id]
    response = None
    for k in range(3):
        try:
            response = get(f'{config.API_ADDRESS}/api/images/{imid}?action=applyfilter&fid={fid}', timeout=3).json()
            break
        except requests.exceptions.ConnectionError:
            if k < 2:
                continue
            logging.fatal(f'Server is unreachable!')
            update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
            return home(update, context)
    if not response or response.get('error'):
        logging.error(f'During /image API\'s sent error: {response.get("error")}')
        update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                  '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
        return home(update, context)
    file = None
    try:
        file = base64.b64decode(response['Image'].get('data'))
    except Exception as e:
        logging.warning(f'During decoding filtered image error happened. Error: {e}')
        update.message.reply_text('üòø–° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ!')
        return home(update, context)
    filtered_im_id[update.message.chat_id] = response['Image']['id']
    updater.bot.sendPhoto(update.message.chat_id, BytesIO(file))
    reply_keyboard = [['‚úÖ–î–∞', '‚ùå–ù–µ—Ç']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text('–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é?', reply_markup=markup)
    logging.info(f'Added filter {fid} to the image {imid}')
    return 2


def save_image_to_room(update, context):  # 2nd in Conversation
    ans = update.message.text
    if ans.lower() == '–¥–∞' or ans == '‚úÖ–î–∞':
        global current_rooms
        global fit_rooms
        global filtered_im_id
        session = db_session.create_session()
        user_id = session.query(User).filter(User.chat_id == str(update.message.chat_id)).first().mainid
        user = None
        for k in range(3):
            try:
                user = get(f'{config.API_ADDRESS}/api/users/{user_id}', timeout=3).json()
                break
            except requests.exceptions.ConnectionError:
                if k < 2:
                    continue
                logging.fatal(f'Server is unreachable!')
                update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
                return home(update, context)
        if not user or user.get('error'):
            logging.error(f'During /image API\'s sent error: {user.get("error")}')
            update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                      '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
            return home(update, context)
        update.message.reply_text('üëæ–û—Ç–∫—Ä—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç...')
        rooms = user['User'].get('rooms')
        text = '<b>üî¢–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É (–∑–¥–µ—Å—å –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–º–Ω–∞—Ç—ã)</b>:\n'
        current_rooms[update.message.chat_id] = []
        cnt = 1
        for i in range(len(rooms)):
            room = None
            for k in range(3):
                try:
                    room = get(f'{config.API_ADDRESS}/api/rooms/{rooms[i]}', timeout=3).json()
                    break
                except requests.exceptions.ConnectionError:
                    if k < 2:
                        continue
                    logging.fatal(f'Server is unreachable!')
                    update.message.reply_text(
                        'üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
                    return home(update, context)
            if not room or room.get('error'):
                logging.error(f'During /image API\'s sent error: {room.get("error")}')
                update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ,'
                                          '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
                return home(update, context)
            if len(room['Room']['images']) < config.ROOM_IMAGE_LIMIT:
                text += f' <b>{cnt}</b>: ' + room['Room'].get('name') + '\n'
                cnt += 1
                current_rooms[update.message.chat_id].append(room)
        if cnt == 1:
            fit_rooms[update.message.chat_id] = 0
            if len(current_rooms[update.message.chat_id]) < config.USER_ROOM_LIMIT:
                update.message.reply_text("üôÖ‚Äç‚ôÇ–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
                return 4
            else:
                update.message.reply_text("üôÖ‚Äç‚ôÇ–ü—Ä–æ—Å—Ç–∏—Ç–µ, –º—ã –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–æ–º–Ω–∞—Ç—É, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å"
                                          "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç.")
                return home(update, context)
        else:
            cnt = cnt - 1
            fit_rooms[update.message.chat_id] = cnt
            reply_keyboard = []
            if cnt % 3 == 0:
                for i in range(0, int(cnt / 3)):
                    line = []
                    for j in range(1, 4):
                        line.append(str(i * 3 + j))
                    reply_keyboard.append(line)
            else:
                for i in range(0, int(cnt / 3) + 1):
                    line = []
                    for j in range(1, 4):
                        if i * 3 + j > cnt:
                            break
                        line.append(str(i * 3 + j))
                    reply_keyboard.append(line)
            markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
            update.message.reply_text(text, reply_markup=markup, parse_mode=ParseMode.HTML)
            return 3
    else:
        iid = filtered_im_id.get(update.message.chat_id)
        response = None
        for k in range(3):
            try:
                response = delete(f'{config.API_ADDRESS}/api/images/{iid}', timeout=3).json()
                break
            except requests.exceptions.ConnectionError:
                if k < 2:
                    continue
                logging.fatal(f'Server is unreachable!')
                update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
                return home(update, context)
        if not response or response.get('error'):
            logging.warning('During delete-request for filtered image error on API happened')
        reply_keyboard = [['‚úÖ–î–∞', '‚ùå–ù–µ—Ç']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text('–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –Ω–∞–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å—Ç—Ä –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≤–∞–º–∏ —Ñ–æ—Ç–æ?', reply_markup=markup)
        return 6


def choose_room(update, context):  # 3rd in Conversation
    global fit_rooms
    global filtered_im_id
    global current_rooms
    num = update.message.text
    if num not in list(str(i) for i in range(1, fit_rooms[update.message.chat_id] + 1)):
        update.message.reply_text(f'üî¢–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã')
        return 3
    num = int(num)
    room = current_rooms[update.message.chat_id][num - 1]
    response = None
    for k in range(3):
        try:
            response = put(f'{config.API_ADDRESS}/api/images/{filtered_im_id[update.message.chat_id]}', json={
                'room_id': room['Room']['id']}, timeout=3).json()
            break
        except requests.exceptions.ConnectionError:
            if k < 2:
                continue
            logging.fatal(f'Server is unreachable!')
            update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
            return home(update, context)
    if not response or response.get('error'):
        logging.error(f'During /image API\'s sent error: {response.get("error")}')
        update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                  '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
        return home(update, context)
    name = room['Room']['name']
    update.message.reply_text(f'‚úÖ–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç—É {name}')
    update.message.reply_text('üî†–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    return 5


def add_room_with_image(update, context):  # 4th in Conversation
    global filtered_im_id
    name = update.message.text
    session = db_session.create_session()
    user_id = session.query(User).filter(User.chat_id == str(update.message.chat_id)).first().mainid
    lii = filtered_im_id.get(update.message.chat_id)
    room = None
    for k in range(3):
        try:
            room = post(f'{config.API_ADDRESS}/api/rooms', json={'name': name, 'users_id': str(user_id)},
                        timeout=3).json()
            break
        except requests.exceptions.ConnectionError:
            if k < 2:
                continue
            logging.fatal(f'Server is unreachable!')
            update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
            return home(update, context)
    if not room or room.get('error'):
        logging.error(f'During /image API\'s sent error: {room.get("error")}')
        update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                  '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
        return home(update, context)
    else:
        response = None
        for k in range(3):
            try:
                response = put(f'{config.API_ADDRESS}/api/images/{lii}', json={'room_id': room['id']},
                               timeout=3).json()
                break
            except requests.exceptions.ConnectionError:
                if k < 2:
                    continue
                logging.fatal(f'Server is unreachable!')
                update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
                return home(update, context)
        if not response or response.get('error'):
            logging.error(f'During /image API\'s sent error: {response.get("error")}')
            update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                      '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
            return home(update, context)
        update.message.reply_text('‚úÖ–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞, —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
        update.message.reply_text('üî†–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
        rid = room['id']
        logging.info(f'Added new image with ID {lii} to room with id {rid}')
        return 5


def set_name_to_image(update, context):  # 5th in Conversation
    global filtered_im_id
    name = update.message.text
    fii = filtered_im_id.get(update.message.chat_id)
    response = None
    for k in range(3):
        try:
            response = put(f'{config.API_ADDRESS}/api/images/{fii}', json={'name': name}, timeout=3).json()
            break
        except requests.exceptions.ConnectionError:
            if k < 2:
                continue
            logging.fatal(f'Server is unreachable!')
            update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
            return home(update, context)
    if not response or response.get('error'):
        logging.error(f'During /image API\'s sent error: {response.get("error")}')
        update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                  '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
        return home(update, context)
    update.message.reply_text('‚úÖ–£—Å–ø–µ—à–Ω–æ!')
    reply_keyboard = [['‚úÖ–î–∞', '‚ùå–ù–µ—Ç']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text('–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –Ω–∞–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å—Ç—Ä –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≤–∞–º–∏ —Ñ–æ—Ç–æ?', reply_markup=markup)
    return 6


def continue_editing_photo(update, context):
    answer = update.message.text
    if answer == '‚úÖ–î–∞':
        reply_keyboard = [['üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 1', 'üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 2', '‚öΩÔ∏è–ß—ë—Ä–Ω–æ-–±–µ–ª–æ–µ 1'],
                          ['üñ≤ –ù–µ–≥–∞—Ç–∏–≤', 'üí°–í—ã—Å–≤–µ—Ç–ª–µ–Ω–∏–µ', 'üåå–†–∞–∑–º—ã—Ç–∏–µ'],
                          ['üìà–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏', 'üìâ–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞', 'üîä–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞'],
                          ['üè∫–†–µ—Ç—Ä–æ', '‚ö´Ô∏è‚ö™Ô∏è–ß—ë—Ä–Ω–æ-–±–µ–ª–æ–µ 2', 'üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 3'], ['üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 4']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        text = 'üî†<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:</b>\n\n üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 1\n üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 2\n ‚öΩÔ∏è–ß—ë—Ä–Ω–æ-–±–µ–ª–æ–µ 1\n üñ≤ –ù–µ–≥–∞—Ç–∏–≤\n' \
               ' üí°–í—ã—Å–≤–µ—Ç–ª–µ–Ω–∏–µ \n üåå–†–∞–∑–º—ã—Ç–∏–µ\n üìà–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏\n üìâ–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞\n üîä–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞\n üè∫–†–µ—Ç—Ä–æ' \
               '\n ‚ö´Ô∏è‚ö™Ô∏è–ß—ë—Ä–Ω–æ-–±–µ–ª–æ–µ 2\n üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 3\n üëΩ–î—Ä—É–≥–æ–π –º–∏—Ä 4'
        update.message.reply_text(text, reply_markup=markup, parse_mode=ParseMode.HTML)
        return 1
    elif answer == '‚ùå–ù–µ—Ç':
        iid = loaded_im_id.get(update.message.chat_id)
        response = None
        for k in range(3):
            try:
                response = delete(f'{config.API_ADDRESS}/api/images/{iid}', timeout=3).json()
                break
            except requests.exceptions.ConnectionError:
                if k < 2:
                    continue
                logging.fatal(f'Server is unreachable!')
                update.message.reply_text('üòø–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: @a7ult, @gabidullin_kamil')
        return home(update, context)
    else:
        session = db_session.create_session()
        username = ''
        chat_id = update.message.chat_id
        try:
            username = session.query(User).filter(User.chat_id == chat_id).first().name + ', '
        except:
            logging.warning(f'Unregistered user entered dialog. Chat_id: {chat_id}')
        update.message.reply_text(f'üòø–ò–∑–≤–∏–Ω–∏, {username}—è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n\n–ù–∞–ø–∏—à–∏ /help, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!')
        return home(update, context)


def home(update, context):
    home_menu(update)
    return ConversationHandler.END


def main():
    global updater
    updater = Updater(config.TOKEN, use_context=True)

    dp = updater.dispatcher

    rooms_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('rooms', rooms)],

        states={
            1: [MessageHandler(Filters.text, command_rooms)],
            2: [MessageHandler(Filters.text, add_room)],
            3: [MessageHandler(Filters.text, room)],
            4: [MessageHandler(Filters.text, add_user_to_room)],
            5: [MessageHandler(Filters.text, command_room)],
            6: [MessageHandler(Filters.text, delete_room)],
            7: [MessageHandler(Filters.text, image)],
            8: [MessageHandler(Filters.text, command_image)],
            9: [MessageHandler(Filters.text, delete_image)],
            10: [MessageHandler(Filters.text, leave_the_room)],
            11: [MessageHandler(Filters.text, change_the_name_of_the_photo)],
        },

        fallbacks=[CommandHandler('home', home)]

    )

    image_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(Filters.photo, image_get)],

        states={
            1: [MessageHandler(Filters.text, choose_filter)],
            2: [MessageHandler(Filters.text, save_image_to_room)],
            3: [MessageHandler(Filters.text, choose_room)],
            4: [MessageHandler(Filters.text, add_room_with_image)],
            5: [MessageHandler(Filters.text, set_name_to_image)],
            6: [MessageHandler(Filters.text, continue_editing_photo)]
        },

        fallbacks=[CommandHandler('home', home)]
    )

    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CommandHandler('help', help))
    dp.add_handler(rooms_conv_handler)
    dp.add_handler(image_conv_handler)
    updater.start_polling(poll_interval=3, timeout=15)

    updater.idle()


main()
