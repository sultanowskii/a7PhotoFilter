from telegram.ext import (CommandHandler, ConversationHandler, Updater, MessageHandler, Filters, StringCommandHandler)
from telegram import InputMediaPhoto, ParseMode

from requests import post, get, delete, put

import config
from data.users import User
from data import db_session

import base64
from io import BytesIO
from werkzeug import exceptions
import logging

logging.basicConfig(
    filename='logs.log',
    format='%(asctime)s %(levelname)s %(name)s %(message)s'
)

db_session.global_init("db/users.sqlite")

current_rooms = dict()
current_room = dict()
current_images = dict()
current_image = dict()
updater = None


def start(update, context):
    session = db_session.create_session()
    chat_id = update.message.chat_id
    user = session.query(User).filter(User.chat_id == chat_id).first()
    if not user:
        name = update.message.chat.first_name
        lastname = update.message.chat.last_name
        answer = post(f'{config.API_ADDRESS}/api/users', json={'name': name, 'lastname': lastname}).json()
        if 'success' in answer.keys():
            user = User(name=name, lastname=lastname, chat_id=chat_id, mainid=answer.get('id'))
            session.add(user)
            session.commit()
            logging.info(f'New user registered: {chat_id} {lastname} {name}')
            update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n"
                                      f" üì∑–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ç–≤–æ–µ —Ñ–æ—Ç–æ.\n"
                                      f"–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º - /help.\n"
                                      f"–ê –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ç–≤–æ–µ —Ñ–æ—Ç–æ, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –µ–≥–æ! "
                                      f"(–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞: 300–∫–±)")
        else:
            err = answer.get('error')
            update.message.reply_text(f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞! {err}')
    else:
        name = user.name
        update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n"
                                  f" üì∑ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ç–≤–æ–µ —Ñ–æ—Ç–æ.\n"
                                  f"–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º - /help.\n"
                                  f" –ê –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ç–≤–æ–µ —Ñ–æ—Ç–æ, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –µ–≥–æ! "
                                  f"(–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞: 300–∫–±)")


def help(update, context):
    update.message.reply_text(
        "  –Ø –ø–æ–º–æ–≥—É –Ω–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ñ–æ—Ç–æ.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –µ–≥–æ –º–Ω–µ!\n\n"
        "‚ùóÔ∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ - 300–∫–±</b>\n\n"
        "   –¢–∞–∫ –∂–µ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å <i>–∫–æ–º–Ω–∞—Ç–∞–º–∏</i>\n"
        "–ö–æ–º–Ω–∞—Ç–∞ - –æ—Å–æ–±–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –∫—É–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º–∏, –¥–æ–±–∞–≤–∏–≤ —Ç—É–¥–∞ —Å–≤–æ–∏—Ö "
        "–¥—Ä—É–∑–µ–π!\n\n"
        "‚úèÔ∏è–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "  /rooms - –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∫–æ–º–Ω–∞—Ç\n"
        "  /help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å (—ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n\n"
        "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: @a7ult, @gabidullin_kamil\n"
        "Github (a7ult): https://github.com/sultanowskii/a7PhotoFilter", parse_mode=ParseMode.HTML)


def rooms(update, context):
    session = db_session.create_session()
    user_id = session.query(User).filter(User.chat_id == str(update.message.chat_id)).first().mainid
    user = get(f'{config.API_ADDRESS}/api/users/{user_id}').json()
    if user.get('error'):
        logging.error(f'During /rooms API\'s sent error: {user.get("error")}')
        update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                  '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
        return
    rooms = user['User'].get('rooms')
    global current_rooms
    text = '<b>–í–∞—à–∏ –∫–æ–º–Ω–∞—Ç—ã</b>:\n'
    current_rooms[update.message.chat_id] = []
    for i in range(len(rooms)):
        room = get(f'{config.API_ADDRESS}/api/rooms/{rooms[i]}').json()
        if not room or room.get('error'):
            logging.error(f'During /rooms API\'s sent error: {room.get("error")}')
            update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                      '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
            return
        text += f" <b>{i + 1}</b>: " + room['Room'].get('name') + '\n'
        current_rooms[update.message.chat_id].append(room)
    update.message.reply_text(text, parse_mode=ParseMode.HTML)
    return 1


def command_rooms(update, context):  # 1st in Covnersation
    command = update.message.text
    if command == 'üñç–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É':
        update.message.reply_text('üìù–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:')
        return 2
    elif command == 'üö™–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É':
        update.message.reply_text('üî¢–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã:')
        return 3
    elif command == 'üì©–î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É':
        update.message.reply_text('üìß –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:')
        return 4
    else:
        session = db_session.create_session()
        username = ''
        chat_id = update.message.chat_id
        try:
            username = session.query(User).filter(User.chat_id == chat_id).first().name + ', '
        except:
            logging.warning(f'Unregistered user entered dialog. Chat_id: {chat_id}')
        update.message.reply_text(f'–ò–∑–≤–∏–Ω–∏, {username}—è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n\n–ù–∞–ø–∏—à–∏ /help, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!')
        return ConversationHandler.END


def add_room(update, context):  # 2nd in Conversation
    name = update.message.text
    session = db_session.create_session()
    user_id = session.query(User).filter(User.chat_id == str(update.message.chat_id)).first().mainid
    answer = post(f'{config.API_ADDRESS}/api/rooms', json={'name': name, 'user_id': str(user_id)}).json()
    if not answer or answer.get('error'):
        logging.error(f'During /rooms API\'s sent error: {answer.get("error")}')
        update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                  '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
        return
    else:
        update.message.reply_text('–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')


def room(update, context):  # 3rd in Conversation
    global current_room
    global current_rooms
    global current_image
    global current_images
    num = update.message.text
    curr_id = update.message.chat_id
    if num not in list(str(i) for i in range(1, len(current_rooms[curr_id] + 1))):
        update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã.')
        return 3
    current_room[curr_id] = int(num) - 1
    room = current_rooms[curr_id][current_room[curr_id]]['Room']
    name = room.get('name')
    text = f'–ö–æ–º–Ω–∞—Ç–∞ \"{name}\":\n'
    images = room.get('images')
    current_images[update.message.chat_id] = []
    for i in range(len(images)):
        image = get(f'{config.API_ADDRESS}/api/images/{images[i]}').json()
        if not image or image.get('error'):
            logging.error(f'During /rooms API\'s sent error: {image.get("error")}')
            update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                      '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
            return 1
        text += f" <b>{i + 1}</b>: " + image['Image'].get('name') + '\n'
        current_images[update.message.chat_id].append(image)
    update.message.reply_text(text, parse_mode=ParseMode.HTML)
    return 5


def add_user_to_room(update, context):  # 4th in Conversation
    rid, name = update.message.text.split('*')
    rid = int(rid)
    session = db_session.create_session()
    userid = session.query(User).filter(User.chat_id == update.message.chat_id).first().id
    answer = put(f'{config.API_ADDRESS}/api/rooms/{rid}', json={'users_id': userid}).json()
    if answer.get('success'):
        updater.bot.send_message(update.message.chat_id, f'‚úÖ–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–Ω–∞—Ç—É \"{name}\"')
        return 1
    elif answer.get('error') == exceptions.Forbidden:
        updater.bot.send_message(update.message.chat_id, f'üèö–≠—Ç–∞ –∫–æ–º–Ω–∞—Ç–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞!')
    else:
        logging.error(f'During /rooms API\'s sent error: {answer.get("error")}')
        update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                  '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
        return 4


def command_room(update, context):  # 5th in Conversation
    command = update.message.text
    userid = update.message.chat_id
    if command == '‚ùå–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É':
        update.message.reply_text('–í—ã —É–≤–µ—Ä–µ–Ω—ã?')
        return 6
    elif command == 'üì£–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ª—é–¥–µ–π':
        room = current_rooms[userid][current_room[userid]]['Room']
        rid = room.get('id')
        name = room.get('name')
        code = f'{rid}*{name}'
        update.message.reply_text(f'–í–∞—à –¥—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥: '
                                  f'<code>{code}</code>\n–≤–æ –≤–∫–ª–∞–¥–∫–µ "–î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É"', parse_mode=ParseMode.HTML)
        return 7
    elif command == 'üåÑ–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ':
        update.message.reply_text('üî¢–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:')
        return 8
    else:
        session = db_session.create_session()
        username = ''
        chat_id = update.message.chat_id
        try:
            username = session.query(User).filter(User.chat_id == chat_id).first().name + ', '
        except:
            logging.warning(f'Unregistered user entered dialog. Chat_id: {chat_id}')
        update.message.reply_text(f'–ò–∑–≤–∏–Ω–∏, {username}—è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n\n–ù–∞–ø–∏—à–∏ /help, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!')
        return ConversationHandler.END


def delete_room(update, context):  # 6th in covnersation
    answer = update.message.text
    if answer == '‚úÖ–î–∞' or answer.lower() == '–¥–∞':
        global current_rooms
        global current_room
        userid = update.message.chat_id
        rid = current_rooms[userid][current_room[userid]]['Room']['id']
        answer = delete(f'{config.API_ADDRESS}/api/rooms/{rid}').json()
        if not answer:
            logging.error(f'During /rooms API\'s sent error: {answer.get("error")}')
            update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                      '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
            return 6
        update.message.reply_text('–ö–æ–º–Ω–∞—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
    return 1


def invite_to_room(update, context):  # 7th in Conversation
    return 3  # –≤ command_room –º—ã –ø—Ä–æ—Å—Ç–æ –¥–æ–ª–∂–Ω—ã —Å–¥–µ–ª–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π - "‚Ü©Ô∏è–ù–∞–∑–∞–¥"


def image(update, context):  # 8th in Conversation
    global current_image
    global current_images
    num = update.message.text
    userid = update.message.chat_id
    if num not in list(str(i) for i in range(1, len(current_images[userid]) + 1)):
        update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
        return 8
    current_image[userid] = int(num) - 1
    image = current_images[update.message.chat_id][current_image[update.message.chat_id]].get('Image').get('data')
    file = base64.b64decode(image)
    updater.bot.sendPhoto(update.message.chat_id, BytesIO(file))
    return 9


def command_image(update, context):  # 9th in Conversation
    command = update.message.text
    if command == 'üóë–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É':
        update.message.reply_text('–í—ã —É–≤–µ—Ä–µ–Ω—ã?')
        return 10
    else:
        session = db_session.create_session()
        username = ''
        chat_id = update.message.chat_id
        try:
            username = session.query(User).filter(User.chat_id == chat_id).first().name + ', '
        except:
            logging.warning(f'Unregistered user entered dialog. Chat_id: {chat_id}')
        update.message.reply_text(f'–ò–∑–≤–∏–Ω–∏, {username}—è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n\n–ù–∞–ø–∏—à–∏ /help, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!')
        return ConversationHandler.END


def delete_image(update, context):  # 10th in Conversation
    answer = update.message.text
    if answer == '‚úÖ–î–∞' or answer.lower() == '–¥–∞':
        global current_image
        global current_images
        userid = update.message.chat_id
        iid = current_images[userid][current_image[userid]]['Image'].get('id')
        answer = delete(f'{config.API_ADDRESS}/api/images/{iid}').json()
        if not answer or answer.get('error'):
            logging.error(f'During /rooms API\'s sent error: {answer.get("error")}')
            update.message.reply_text('üòø–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, '
                                      '—Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!')
            return 10
        update.message.reply_text('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
    return 3


def home(update, context):
    return ConversationHandler.END


def main():
    global updater
    updater = Updater(config.TOKEN, use_context=True)

    dp = updater.dispatcher

    rooms_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('rooms', rooms)],

        states={
            1: [MessageHandler(Filters.text, command_rooms)],
            2: [MessageHandler(Filters.text, add_room)],
            3: [MessageHandler(Filters.text, room)],
            4: [MessageHandler(Filters.text, add_user_to_room)],
            5: [MessageHandler(Filters.text, command_room)],
            6: [MessageHandler(Filters.text, delete_room)],
            7: [MessageHandler(Filters.text, invite_to_room)],
            8: [MessageHandler(Filters.text, image)],
            9: [MessageHandler(Filters.text, command_image)],
            10: [MessageHandler(Filters.text, delete_image)]
        },

        fallbacks=[CommandHandler('home', home)]

    )
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help))
    dp.add_handler(rooms_conv_handler)
    updater.start_polling()

    updater.idle()


if __name__ == '__main__':
    main()
